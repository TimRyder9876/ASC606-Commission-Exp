/***** SET 'X' ALLOCATIONS *****/

UPDATE SCHEMA.COM_HR_TXNS_STAGE_ALL S
SET S.ALLOC_TYPE = 'X' -- X IS FOR CUST DETAIL RECORDS WITH NO TRANS RECORDS MATCHING
WHERE
 S.QUERY_MATCH in ('NO_QUALIFIED_MATCH_TO_TRANS',
                   'CUSTDET_NI_AND_PI_AMTS_ARE_ZERO',
                   'CUSTDET_COM_AMT_IS_ZERO') AND
 TRIM(S.ALLOC_TYPE) IS NULL and
 s.pay_period_id IN (SELECT P.PP_ID
             FROM
              SCHEMA.COM_HR_JEID_PP P
             WHERE
              P.TO_BE_PROCESSED = 'Y' AND
              P.PROCESSED = 'N');
COMMIT;

UPDATE SCHEMA.COM_HR_TXNS_STAGE_ALL S
SET
  S.CALC_NEW_AMT = S.CUST_NEW_AMT,
  S.CALC_RENEWAL_AMT = S.CUST_RENEWAL_AMT,
  S.CALC_INCREASE_AMT = S.CUST_INCREASE_AMT,
  S.CALC_DIG_NEW_SEM_AMT = S.CUST_DIG_NEW_SEM_AMT
WHERE 
 S.ALLOC_TYPE = 'X' and
 s.pay_period_id IN (SELECT P.PP_ID
             FROM
              SCHEMA.COM_HR_JEID_PP P
             WHERE
              P.TO_BE_PROCESSED = 'Y' AND
              P.PROCESSED = 'N');
COMMIT;


/***** SET 'N' ALLOCATIONS *****/
UPDATE SCHEMA.COM_HR_TXNS_STAGE_ALL S
SET S.ALLOC_TYPE = 'N'
WHERE
 TRIM(S.CUST_TYPE) = 'NEW'
 AND S.CUMUL_NI_CUST_TYPE_AMT = S.CUST_NI_AMT 
 AND S.CUST_NI_AMT = S.CUST_NEW_AMT
 AND S.CUMUL_NI_CUST_TYPE_AMT <> 0
 AND TRIM(S.ALLOC_TYPE) IS NULL
 AND S.SOURCE = 'N' and
 s.pay_period_id IN (SELECT P.PP_ID
             FROM
              SCHEMA.COM_HR_JEID_PP P
             WHERE
              P.TO_BE_PROCESSED = 'Y' AND
              P.PROCESSED = 'N') ;
COMMIT;

UPDATE SCHEMA.COM_HR_TXNS_STAGE_ALL S
SET
  S.CALC_NEW_AMT = S.NI_AMT,
  S.CALC_RENEWAL_AMT = 0,
  S.CALC_INCREASE_AMT = 0
WHERE 
 S.ALLOC_TYPE = 'N' and
 s.pay_period_id IN (SELECT P.PP_ID
             FROM
              SCHEMA.COM_HR_JEID_PP P
             WHERE
              P.TO_BE_PROCESSED = 'Y' AND
              P.PROCESSED = 'N'); 
COMMIT; 


/***** SET 'M1' ALLOCATIONS *****/
UPDATE SCHEMA.COM_HR_TXNS_STAGE_ALL S
SET S.ALLOC_TYPE = 'M1' 
WHERE
 TRIM(S.CUST_TYPE) = 'ADV'
 AND S.CUST_NEW_AMT = 0
 AND TRIM(S.ALLOC_TYPE) IS NULL
 AND ((S.CUMUL_PI_CUST_TYPE_AMT = S.CUST_PI_AMT AND
       S.CUST_RENEWAL_AMT = S.CUMUL_PI_CUST_TYPE_AMT AND
       S.CUST_INCREASE_AMT = S.CUMUL_NI_CUST_TYPE_AMT - S.CUMUL_PI_CUST_TYPE_AMT) 
       OR
      (S.CUMUL_UNQ_PI_CUST_TYPE_AMT = S.CUST_PI_AMT AND
       S.CUST_RENEWAL_AMT = S.CUMUL_UNQ_PI_CUST_TYPE_AMT AND
       S.CUST_INCREASE_AMT = S.CUMUL_NI_CUST_TYPE_AMT - S.CUMUL_UNQ_PI_CUST_TYPE_AMT)) and
 s.pay_period_id IN (SELECT P.PP_ID
             FROM
              SCHEMA.COM_HR_JEID_PP P
             WHERE
              P.TO_BE_PROCESSED = 'Y' AND
              P.PROCESSED = 'N');
COMMIT;  

UPDATE SCHEMA.COM_HR_TXNS_STAGE_ALL S
SET 
 S.CALC_NEW_AMT = 0,
 S.CALC_RENEWAL_AMT = S.PI_AMT,
 S.CALC_INCREASE_AMT = S.NI_AMT-S.PI_AMT
WHERE 
 S.ALLOC_TYPE = 'M1' and
 s.pay_period_id IN (SELECT P.PP_ID
             FROM
              SCHEMA.COM_HR_JEID_PP P
             WHERE
              P.TO_BE_PROCESSED = 'Y' AND
              P.PROCESSED = 'N');
COMMIT;


/***** SET 'M2' ALLOCATIONS *****/
/* FOR THESE THE NI_AMTS ARE THE DETAIL FOR THE CUST_RENEWAL_AMT */
/* DO NO USE THE PI_AMTS */

UPDATE SCHEMA.COM_HR_TXNS_STAGE_ALL S
SET S.ALLOC_TYPE = 'M2' 
WHERE
 S.CUMUL_NI_CUST_TYPE_AMT = S.CUST_NI_AMT 
 AND S.CUST_NI_AMT = S.CUST_RENEWAL_AMT
 AND S.CUST_INCREASE_AMT = 0
 AND TRIM(S.CUST_TYPE) = 'ADV'
 AND S.CUST_NEW_AMT = 0 
 AND TRIM(S.ALLOC_TYPE) IS NULL and
 s.pay_period_id IN (SELECT P.PP_ID
             FROM
              SCHEMA.COM_HR_JEID_PP P
             WHERE
              P.TO_BE_PROCESSED = 'Y' AND
              P.PROCESSED = 'N');
COMMIT;

UPDATE SCHEMA.COM_HR_TXNS_STAGE_ALL S
SET
 S.CALC_NEW_AMT = 0,
 S.CALC_RENEWAL_AMT = S.NI_AMT,
 S.CALC_INCREASE_AMT = 0
WHERE 
 S.ALLOC_TYPE = 'M2' and
 s.pay_period_id IN (SELECT P.PP_ID
             FROM
              SCHEMA.COM_HR_JEID_PP P
             WHERE
              P.TO_BE_PROCESSED = 'Y' AND
              P.PROCESSED = 'N');
COMMIT;


/***** SET 'M3' ALLOCATIONS *****/
/* FOR THESE THE NI_AMTS SHOULD BE ALLOCATED BETWEEN RENEWAL AND INCREASE AMOUNTS */
/* DO NO USE THE PI_AMTS */

UPDATE SCHEMA.COM_HR_TXNS_STAGE_ALL S
SET S.ALLOC_TYPE = 'M3' 
WHERE
 S.CUMUL_NI_CUST_TYPE_AMT = S.CUST_NI_AMT 
 AND S.CUST_NI_AMT = ABS(S.CUST_RENEWAL_AMT) + ABS(S.CUST_INCREASE_AMT)
 AND TRIM(S.CUST_TYPE) = 'ADV'
 AND S.CUST_NEW_AMT = 0 
 AND TRIM(S.ALLOC_TYPE) IS NULL and
 s.pay_period_id IN (SELECT P.PP_ID
             FROM
              SCHEMA.COM_HR_JEID_PP P
             WHERE
              P.TO_BE_PROCESSED = 'Y' AND
              P.PROCESSED = 'N');
COMMIT;

UPDATE SCHEMA.COM_HR_TXNS_STAGE_ALL S
SET
 S.CALC_NEW_AMT = 0,
 S.CALC_RENEWAL_AMT = ROUND(S.NI_AMT*(S.CUST_RENEWAL_AMT/(S.CUMUL_NI_CUST_TYPE_AMT)),2),
 S.CALC_INCREASE_AMT = ROUND(S.NI_AMT*(S.CUST_INCREASE_AMT/(S.CUMUL_NI_CUST_TYPE_AMT)),2)
WHERE 
 S.ALLOC_TYPE = 'M3' and
 s.pay_period_id IN (SELECT P.PP_ID
             FROM
              SCHEMA.COM_HR_JEID_PP P
             WHERE
              P.TO_BE_PROCESSED = 'Y' AND
              P.PROCESSED = 'N');
COMMIT;  
 

/***** SET 'M4' ALLOCATIONS *****/
/* FOR THESE THE NI_AMTS SHOULD BE ALLOCATED BETWEEN RENEWAL AND INCREASE AMOUNTS */
/* ALLOCATE CUST_NI_AMT TO RENEWAL_AMT FIRST, THEN THEN DIFFERENCE GOES TO INCREASE_AMT*/
/* DO NO USE THE PI_AMTS */

UPDATE SCHEMA.COM_HR_TXNS_STAGE_ALL S
SET S.ALLOC_TYPE = 'M4' 

WHERE
 S.CUST_TYPE = 'ADV' AND
 S.CUST_NI_AMT != 0 AND
 S.CUST_NI_AMT = S.CUMUL_NI_CUST_TYPE_AMT AND
 S.CUST_NI_AMT = S.CUST_RENEWAL_AMT + S.CUST_INCREASE_AMT AND
 S.CUST_NEW_AMT = 0 AND
 TRIM(S.ALLOC_TYPE) IS NULL and
 s.pay_period_id IN (SELECT P.PP_ID
             FROM
              SCHEMA.COM_HR_JEID_PP P
             WHERE
              P.TO_BE_PROCESSED = 'Y' AND
              P.PROCESSED = 'N');
COMMIT; 

UPDATE SCHEMA.COM_HR_TXNS_STAGE_ALL S
SET
 S.CALC_NEW_AMT = 0,
 S.CALC_RENEWAL_AMT = S.NI_AMT*(S.CUST_RENEWAL_AMT/(S.CUMUL_NI_CUST_TYPE_AMT)),
 S.CALC_INCREASE_AMT = S.NI_AMT*(S.CUST_INCREASE_AMT/(S.CUMUL_NI_CUST_TYPE_AMT))
WHERE 
 S.ALLOC_TYPE = 'M4' and
 s.pay_period_id IN (SELECT P.PP_ID
             FROM
              SCHEMA.COM_HR_JEID_PP P
             WHERE
              P.TO_BE_PROCESSED = 'Y' AND
              P.PROCESSED = 'N');
COMMIT;


/***** SET 'PI' ALLOCATIONS *****/
/* FOR THESE, A CHANGE IN PI CAUSE THE COMMISSION CHANGE */
/* THESE ORIGINAL ITEMS AFFECTED BY THIS ARE UNKNOWN */
/* USE THE PI_AMTS TO ALLOCATE FIRST TO RENEWAL AMOUNT AND THEN CUST_INCREASE AMT*/

UPDATE SCHEMA.COM_HR_TXNS_STAGE_ALL S
SET S.ALLOC_TYPE = 'PI' 

WHERE
 TRIM(S.ALLOC_TYPE) IS NULL 
 AND TRIM(S.CUST_TYPE) = 'ADV'
 AND S.CUST_NI_AMT = 0
 AND S.CUST_PI_AMT <> 0
 AND S.CUST_NEW_AMT = 0 
 AND S.CUMUL_PI_CUST_TYPE_AMT <> 0 and
 s.pay_period_id IN (SELECT P.PP_ID
             FROM
              SCHEMA.COM_HR_JEID_PP P
             WHERE
              P.TO_BE_PROCESSED = 'Y' AND
              P.PROCESSED = 'N');
COMMIT;

MERGE INTO SCHEMA.COM_HR_TXNS_STAGE_ALL S
USING
 (SELECT 
  S.TRANS_ID, 
  0 AS CALC_NEW_AMT,
  ROUND(CASE WHEN S.SUM_PI_AMTS >1 OR S.SUM_PI_AMTS <-1 THEN
    (S.CUST_RENEWAL_AMT/S.SUM_PI_AMTS)*S.PI_AMT 
   ELSE
    CASE /* WHEN RENEWAL AMT IS POSITIVE USE POSITIVE PI AMTS FOR ALLOC */ 
         WHEN S.CUST_RENEWAL_AMT > 0 AND S.SUM_POS_PI_AMTS > 0 THEN 
           CASE WHEN S.PI_AMT < 0 THEN PI_AMT
                WHEN S.PI_AMT > 0 THEN
                     S.PI_AMT/S.SUM_POS_PI_AMTS*(S.CUST_RENEWAL_AMT-S.SUM_NEG_PI_AMTS) END 
           
         WHEN S.CUST_RENEWAL_AMT > 0 AND S.SUM_POS_PI_AMTS = 0 THEN 
           CASE WHEN S.PI_AMT < 0 THEN ABS(S.PI_AMT)/ABS(S.SUM_NEG_PI_AMTS)*S.CUST_RENEWAL_AMT
                END
                   
         /* WHEN RENEWAL AMT IS NEGATIVE USE NEGATIVE PI AMTS FOR ALLOC */        
         WHEN S.CUST_RENEWAL_AMT < 0 AND S.SUM_NEG_PI_AMTS < 0 THEN            
           CASE WHEN S.PI_AMT > 0 THEN S.PI_AMT
                WHEN S.PI_AMT < 0 THEN
                     S.PI_AMT/S.SUM_NEG_PI_AMTS*(S.CUST_RENEWAL_AMT-S.SUM_POS_PI_AMTS) END
                   
         WHEN S.CUST_RENEWAL_AMT < 0 AND S.SUM_NEG_PI_AMTS = 0 THEN            
           CASE WHEN S.PI_AMT > 0 THEN (S.PI_AMT/S.SUM_POS_PI_AMTS)*S.CUST_RENEWAL_AMT END          
                   
    END END,2) AS CALC_RENEWAL_AMT,       

  ROUND(CASE WHEN S.SUM_PI_AMTS >1 OR S.SUM_PI_AMTS <-1 THEN
    (S.CUST_INCREASE_AMT/S.SUM_PI_AMTS)*S.PI_AMT 
   ELSE
    CASE /* WHEN INCREASE AMT IS POSITIVE USE POSITIVE PI AMTS FOR ALLOC */ 
         WHEN S.CUST_INCREASE_AMT > 0 AND S.SUM_POS_PI_AMTS > 0 THEN 
           CASE WHEN S.PI_AMT < 0 THEN S.PI_AMT
                WHEN S.PI_AMT > 0 THEN
                     S.PI_AMT/S.SUM_POS_PI_AMTS*(S.CUST_INCREASE_AMT-S.SUM_NEG_PI_AMTS) END 
         
         WHEN CUST_INCREASE_AMT > 0 AND S.SUM_POS_PI_AMTS = 0 THEN 
           CASE WHEN S.PI_AMT < 0 THEN ABS(S.PI_AMT)/ABS(S.SUM_NEG_PI_AMTS)*CUST_INCREASE_AMT
                END
                
         /* WHEN INCREASE AMT IS NEGATIVE USE NEGATIVE PI AMTS FOR ALLOC */          
         WHEN CUST_INCREASE_AMT < 0 AND S.SUM_NEG_PI_AMTS < 0 THEN            
           CASE WHEN S.PI_AMT > 0 THEN PI_AMT
                WHEN S.PI_AMT < 0 THEN
                     S.PI_AMT/S.SUM_NEG_PI_AMTS*(CUST_INCREASE_AMT-S.SUM_POS_PI_AMTS) END
                   
         WHEN CUST_INCREASE_AMT < 0 AND S.SUM_NEG_PI_AMTS = 0 THEN            
           CASE WHEN S.PI_AMT > 0 THEN (S.PI_AMT/S.SUM_POS_PI_AMTS)*CUST_INCREASE_AMT END          
                   
    END END,2) AS CALC_INCREASE_AMT        
                
FROM 
(
 SELECT
    S1.KGEN_PAYEEID, S1.PAY_PERIOD_ID, S1.CUSTOMER_ID, S1.PRODUCT_TYPE, S1.COMP_YEAR,
    S1.COM_IND, S1.CUST_NI_AMT, S1.CUST_PI_AMT, S1.CUST_NEW_AMT, S1.CUST_RENEWAL_AMT,
    S1.CUST_INCREASE_AMT, S1.NEW_RATE, S1.RENEWAL_RATE, S1.INCREASE_RATE, S1.CUST_COM_AMT,
    S1.CUST_TYPE, S1.ITEM_ID, S1.SV_ITEM_ID, S1.PRODUCT_CODE, S1.PRODUCT_ISSUE_NUM,
    S1.PROD_TYPE, S1.UDAC_CODE, S1.NI_AMT, S1.PI_AMT, S1.CUMULATIVE_PI_AMT,
    S1.CUMULATIVE_NI_AMT, S1.TRANS_ID, S1.QUERY_MATCH, 
    S1.ALLOC_TYPE,
    SUM(S1.PI_AMT) OVER
          (PARTITION BY S1.KGEN_PAYEEID,
                        S1.PAY_PERIOD_ID,
                        S1.CUSTOMER_ID,
                        S1.PRODUCT_TYPE,
                        S1.COMP_YEAR) AS SUM_PI_AMTS,
     NVL(SUM(case when S1.PI_AMT > 0 then S1.PI_AMT end) OVER
          (PARTITION BY S1.KGEN_PAYEEID,
                        S1.PAY_PERIOD_ID,
                        S1.CUSTOMER_ID,
                        S1.PRODUCT_TYPE,
                        S1.COMP_YEAR),0) AS SUM_POS_PI_AMTS,   
     NVL(SUM(case when S1.PI_AMT < 0 then S1.PI_AMT end) OVER
          (PARTITION BY S1.KGEN_PAYEEID,
                        S1.PAY_PERIOD_ID,
                        S1.CUSTOMER_ID,
                        S1.PRODUCT_TYPE,
                        S1.COMP_YEAR),0) AS SUM_NEG_PI_AMTS  

  FROM 
   SCHEMA.COM_HR_TXNS_STAGE_ALL S1
  WHERE 
   S1.ALLOC_TYPE = 'PI' and
   s1.pay_period_id IN (SELECT P.PP_ID
             FROM
              SCHEMA.COM_HR_JEID_PP P
             WHERE
              P.TO_BE_PROCESSED = 'Y' AND
              P.PROCESSED = 'N')) S
  ) X
ON
 (X.TRANS_ID = S.TRANS_ID AND
  S.ALLOC_TYPE = 'PI')

WHEN MATCHED THEN
  UPDATE 
   SET 
     S.CALC_NEW_AMT = X.CALC_NEW_AMT,
     S.CALC_RENEWAL_AMT = X.CALC_RENEWAL_AMT,
     S.CALC_INCREASE_AMT = X.CALC_INCREASE_AMT;
COMMIT;


/***** SET 'M5' ALLOCATIONS *****/
/* FOR THESE, THERE IS ONLY A RENEWAL AMOUNT */
/* ALLOCATE THE NI_AMTS TO THE RENEWAL AMOUNT */
/* DO NOT USE THE PI_AMTS*/

UPDATE SCHEMA.COM_HR_TXNS_STAGE_ALL S
SET S.ALLOC_TYPE = 'M5' 
WHERE
 TRIM(S.ALLOC_TYPE) IS NULL AND
 S.CUST_INCREASE_AMT = 0 AND
 S.CUST_NEW_AMT = 0 AND
 S.CUST_RENEWAL_AMT <> 0 AND
 S.CUMUL_NI_CUST_TYPE_AMT <> 0 AND
 TRIM(S.CUST_TYPE) = 'ADV' and
 s.pay_period_id IN (SELECT P.PP_ID
             FROM
              SCHEMA.COM_HR_JEID_PP P
             WHERE
              P.TO_BE_PROCESSED = 'Y' AND
              P.PROCESSED = 'N') ;
COMMIT;

MERGE INTO SCHEMA.COM_HR_TXNS_STAGE_ALL S
USING
 (SELECT
  S.CUSTDET_TRANS_ID,
  S.TRANS_ID, 
  0 AS CALC_NEW_AMT,
  s.rowid as row_id,
  ROUND(CASE WHEN S.SUM_NI_AMTS >1 OR S.SUM_NI_AMTS <-1 THEN
    (S.CUST_RENEWAL_AMT/S.SUM_NI_AMTS)*S.NI_AMT 
   ELSE
    CASE /* WHEN RENEWAL AMT IS POSITIVE USE POSITIVE NI AMTS FOR ALLOC */ 
         WHEN S.CUST_RENEWAL_AMT > 0 AND S.SUM_POS_NI_AMTS > 0 THEN 
           CASE WHEN S.NI_AMT < 0 THEN S.NI_AMT
                WHEN S.NI_AMT > 0 THEN
                     S.NI_AMT/S.SUM_POS_NI_AMTS*(S.CUST_RENEWAL_AMT-S.SUM_NEG_NI_AMTS) END 
         
         WHEN S.CUST_RENEWAL_AMT > 0 AND S.SUM_POS_NI_AMTS = 0 THEN 
           CASE WHEN S.NI_AMT < 0 THEN ABS(S.NI_AMT)/ABS(S.SUM_NEG_NI_AMTS)*S.CUST_RENEWAL_AMT
                END
                
         /* WHEN RENEWAL AMT IS NEGATIVE USE NEGATIVE NI AMTS FOR ALLOC */          
         WHEN S.CUST_RENEWAL_AMT < 0 AND S.SUM_NEG_NI_AMTS < 0 THEN            
           CASE WHEN S.NI_AMT > 0 THEN NI_AMT
                WHEN S.NI_AMT < 0 THEN
                     S.NI_AMT/S.SUM_NEG_NI_AMTS*(S.CUST_RENEWAL_AMT-S.SUM_POS_NI_AMTS) END
                   
         WHEN S.CUST_RENEWAL_AMT < 0 AND S.SUM_NEG_NI_AMTS = 0 THEN            
           CASE WHEN S.NI_AMT > 0 THEN (S.NI_AMT/S.SUM_POS_NI_AMTS)*S.CUST_RENEWAL_AMT END          
                   
    END END,2) AS CALC_RENEWAL_AMT, 
  0 AS CALC_INCREASE_AMT  
FROM
 (SELECT
    S1.KGEN_PAYEEID, S1.PAY_PERIOD_ID, S1.CUSTOMER_ID, S1.PRODUCT_TYPE, S1.COMP_YEAR,
    S1.COM_IND, S1.CUST_NI_AMT, S1.CUST_PI_AMT, S1.CUST_NEW_AMT, S1.CUST_RENEWAL_AMT,
    S1.CUST_INCREASE_AMT, S1.NEW_RATE, S1.RENEWAL_RATE, S1.INCREASE_RATE, S1.CUST_COM_AMT,
    S1.CUST_TYPE, S1.ITEM_ID, S1.SV_ITEM_ID, S1.PRODUCT_CODE, S1.PRODUCT_ISSUE_NUM,
    S1.PROD_TYPE, S1.UDAC_CODE, S1.NI_AMT, S1.PI_AMT, S1.CUMULATIVE_PI_AMT,
    S1.CUMULATIVE_NI_AMT, S1.TRANS_ID, S1.QUERY_MATCH, S1.CUSTDET_TRANS_ID, 
    S1.ALLOC_TYPE,
     SUM(S1.NI_AMT) OVER
          (PARTITION BY S1.KGEN_PAYEEID,
                        S1.PAY_PERIOD_ID,
                        S1.CUSTOMER_ID,
                        S1.PRODUCT_TYPE,
                        S1.COMP_YEAR) AS SUM_NI_AMTS,
     NVL(SUM(case when S1.NI_AMT > 0 then S1.NI_AMT end) OVER
          (PARTITION BY S1.KGEN_PAYEEID,
                        S1.PAY_PERIOD_ID,
                        S1.CUSTOMER_ID,
                        S1.PRODUCT_TYPE,
                        S1.COMP_YEAR),0) AS SUM_POS_NI_AMTS,   
     NVL(SUM(case when S1.NI_AMT < 0 then S1.NI_AMT end) OVER
          (PARTITION BY S1.KGEN_PAYEEID,
                        S1.PAY_PERIOD_ID,
                        S1.CUSTOMER_ID,
                        S1.PRODUCT_TYPE,
                        S1.COMP_YEAR),0) AS SUM_NEG_NI_AMTS                                                                      
                        
    FROM 
     SCHEMA.COM_HR_TXNS_STAGE_ALL S1
    WHERE 
     S1.ALLOC_TYPE = 'M5' and
     s1.pay_period_id IN (SELECT P.PP_ID
                 FROM
                  SCHEMA.COM_HR_JEID_PP P
                 WHERE
                  P.TO_BE_PROCESSED = 'Y' AND
                  P.PROCESSED = 'N')     

     ) S
  ) X
ON
 (X.TRANS_ID = S.TRANS_ID AND
  X.CUSTDET_TRANS_ID = S.CUSTDET_TRANS_ID AND
  x.row_id = s.rowid and
  S.ALLOC_TYPE = 'M5')

WHEN MATCHED THEN
  UPDATE 
   SET 
     S.CALC_NEW_AMT = X.CALC_NEW_AMT,
     S.CALC_RENEWAL_AMT = X.CALC_RENEWAL_AMT,
     S.CALC_INCREASE_AMT = X.CALC_INCREASE_AMT;
COMMIT;     


/***** SET 'M6' ALLOCATIONS *****/
/* FOR THESE, PI AMOUNT = RENEWAL AMT AND NI AMOUNT = INCREASE AMT*/
/* USE THE PI AMOUNTS FOR THE RENEWAL AMOUNT */
/* USE THE NI AMOUNTS FOR THE INCREASE AMOUNTS*/
/* NO ALLOCATION NEEDED */

UPDATE SCHEMA.COM_HR_TXNS_STAGE_ALL S
SET S.ALLOC_TYPE = 'M6' 
WHERE
 TRIM(S.ALLOC_TYPE) IS NULL AND
 TRIM(S.CUST_TYPE) = 'ADV' AND
 S.CUST_PI_AMT = S.CUST_RENEWAL_AMT AND
 S.CUST_NI_AMT = S.CUST_INCREASE_AMT AND
 S.CUST_NEW_AMT = 0 AND
 S.CUMUL_NI_CUST_TYPE_AMT = S.CUST_INCREASE_AMT AND
 S.CUMUL_PI_CUST_TYPE_AMT = S.CUST_RENEWAL_AMT and
 s.pay_period_id IN (SELECT P.PP_ID
             FROM
              SCHEMA.COM_HR_JEID_PP P
             WHERE
              P.TO_BE_PROCESSED = 'Y' AND
              P.PROCESSED = 'N') ;
COMMIT;
 
UPDATE SCHEMA.COM_HR_TXNS_STAGE_ALL S
SET
 S.CALC_NEW_AMT = 0,
 S.CALC_RENEWAL_AMT = S.PI_AMT,
 S.CALC_INCREASE_AMT = S.NI_AMT
WHERE 
 S.ALLOC_TYPE = 'M6' and
 s.pay_period_id IN (SELECT P.PP_ID
             FROM
              SCHEMA.COM_HR_JEID_PP P
             WHERE
              P.TO_BE_PROCESSED = 'Y' AND
              P.PROCESSED = 'N');
COMMIT; 


/***** SET 'M7' ALLOCATIONS *****/
/* FOR THESE, PI AMOUNT = 0 AND NI AMOUNT <> 0*/
/* USE THE NI AMOUNTS ALLOCATING TO THE RENEWAL AND INCREASE AMOUNTS */

UPDATE SCHEMA.COM_HR_TXNS_STAGE_ALL S
SET S.ALLOC_TYPE = 'M7'
WHERE
 TRIM(S.ALLOC_TYPE) IS NULL AND
 TRIM(S.CUST_TYPE) = 'ADV' AND
 S.CUST_PI_AMT = 0 AND
 S.CUST_NI_AMT <> 0 AND
 S.CUST_NEW_AMT = 0 AND
 S.CUMUL_NI_CUST_TYPE_AMT <> 0 and
 s.pay_period_id IN (SELECT P.PP_ID
             FROM
              SCHEMA.COM_HR_JEID_PP P
             WHERE
              P.TO_BE_PROCESSED = 'Y' AND
              P.PROCESSED = 'N');
COMMIT;

MERGE INTO SCHEMA.COM_HR_TXNS_STAGE_ALL S
USING
 (SELECT
  S.TRANS_ID, 
  0 AS CALC_NEW_AMT,
  ROUND(CASE WHEN S.SUM_NI_AMTS >1 OR S.SUM_NI_AMTS <-1 THEN
    (S.CUST_RENEWAL_AMT/S.SUM_NI_AMTS)*S.NI_AMT 
   ELSE
    CASE /* WHEN RENEWAL AMT IS POSITIVE USE POSITIVE NI AMTS FOR ALLOC */ 
         WHEN S.CUST_RENEWAL_AMT > 0 AND S.SUM_POS_NI_AMTS > 0 THEN 
           CASE WHEN S.NI_AMT < 0 THEN NI_AMT
                WHEN S.NI_AMT > 0 THEN
                     S.NI_AMT/S.SUM_POS_NI_AMTS*(S.CUST_RENEWAL_AMT-S.SUM_NEG_NI_AMTS) END 
           
         WHEN S.CUST_RENEWAL_AMT > 0 AND S.SUM_POS_NI_AMTS = 0 THEN 
           CASE WHEN S.NI_AMT < 0 THEN ABS(S.NI_AMT)/ABS(S.SUM_NEG_NI_AMTS)*S.CUST_RENEWAL_AMT
                END
                   
         /* WHEN RENEWAL AMT IS NEGATIVE USE NEGATIVE NI AMTS FOR ALLOC */        
         WHEN S.CUST_RENEWAL_AMT < 0 AND S.SUM_NEG_NI_AMTS < 0 THEN            
           CASE WHEN S.NI_AMT > 0 THEN S.NI_AMT
                WHEN S.NI_AMT < 0 THEN
                     S.NI_AMT/S.SUM_NEG_NI_AMTS*(S.CUST_RENEWAL_AMT-S.SUM_POS_NI_AMTS) END
                   
         WHEN S.CUST_RENEWAL_AMT < 0 AND S.SUM_NEG_NI_AMTS = 0 THEN            
           CASE WHEN S.NI_AMT > 0 THEN (S.NI_AMT/S.SUM_POS_NI_AMTS)*S.CUST_RENEWAL_AMT END          
                   
    END END,2) AS CALC_RENEWAL_AMT,       

  ROUND(CASE WHEN S.SUM_NI_AMTS >1 OR S.SUM_NI_AMTS <-1 THEN
    (S.CUST_INCREASE_AMT/S.SUM_NI_AMTS)*S.NI_AMT 
   ELSE
    CASE /* WHEN INCREASE AMT IS POSITIVE USE POSITIVE NI AMTS FOR ALLOC */ 
         WHEN S.CUST_INCREASE_AMT > 0 AND S.SUM_POS_NI_AMTS > 0 THEN 
           CASE WHEN S.NI_AMT < 0 THEN S.NI_AMT
                WHEN S.NI_AMT > 0 THEN
                     S.NI_AMT/S.SUM_POS_NI_AMTS*(S.CUST_INCREASE_AMT-S.SUM_NEG_NI_AMTS) END 
         
         WHEN CUST_INCREASE_AMT > 0 AND S.SUM_POS_NI_AMTS = 0 THEN 
           CASE WHEN S.NI_AMT < 0 THEN ABS(S.NI_AMT)/ABS(S.SUM_NEG_NI_AMTS)*CUST_INCREASE_AMT
                END
                
         /* WHEN INCREASE AMT IS NEGATIVE USE NEGATIVE NI AMTS FOR ALLOC */          
         WHEN CUST_INCREASE_AMT < 0 AND S.SUM_NEG_NI_AMTS < 0 THEN            
           CASE WHEN S.NI_AMT > 0 THEN NI_AMT
                WHEN S.NI_AMT < 0 THEN
                     S.NI_AMT/S.SUM_NEG_NI_AMTS*(CUST_INCREASE_AMT-S.SUM_POS_NI_AMTS) END
                   
         WHEN CUST_INCREASE_AMT < 0 AND S.SUM_NEG_NI_AMTS = 0 THEN            
           CASE WHEN S.NI_AMT > 0 THEN (S.NI_AMT/S.SUM_POS_NI_AMTS)*CUST_INCREASE_AMT END          
                   
    END END,2) AS CALC_INCREASE_AMT        
                
FROM 
(
 SELECT
    S1.KGEN_PAYEEID, S1.PAY_PERIOD_ID, S1.CUSTOMER_ID, S1.PRODUCT_TYPE, S1.COMP_YEAR,
    S1.COM_IND, S1.CUST_NI_AMT, S1.CUST_PI_AMT, S1.CUST_NEW_AMT, S1.CUST_RENEWAL_AMT,
    S1.CUST_INCREASE_AMT, S1.NEW_RATE, S1.RENEWAL_RATE, S1.INCREASE_RATE, S1.CUST_COM_AMT,
    S1.CUST_TYPE, S1.ITEM_ID, S1.SV_ITEM_ID, S1.PRODUCT_CODE, S1.PRODUCT_ISSUE_NUM,
    S1.PROD_TYPE, S1.UDAC_CODE, S1.NI_AMT, S1.PI_AMT, S1.CUMULATIVE_PI_AMT,
    S1.CUMULATIVE_NI_AMT, S1.TRANS_ID, S1.QUERY_MATCH,
    S1.ALLOC_TYPE,
    SUM(S1.NI_AMT) OVER
          (PARTITION BY S1.KGEN_PAYEEID,
                        S1.PAY_PERIOD_ID,
                        S1.CUSTOMER_ID,
                        S1.PRODUCT_TYPE,
                        S1.COMP_YEAR) AS SUM_NI_AMTS,
     NVL(SUM(case when S1.NI_AMT > 0 then S1.NI_AMT end) OVER
          (PARTITION BY S1.KGEN_PAYEEID,
                        S1.PAY_PERIOD_ID,
                        S1.CUSTOMER_ID,
                        S1.PRODUCT_TYPE,
                        S1.COMP_YEAR),0) AS SUM_POS_NI_AMTS,   
     NVL(SUM(case when S1.NI_AMT < 0 then S1.NI_AMT end) OVER
          (PARTITION BY S1.KGEN_PAYEEID,
                        S1.PAY_PERIOD_ID,
                        S1.CUSTOMER_ID,
                        S1.PRODUCT_TYPE,
                        S1.COMP_YEAR),0) AS SUM_NEG_NI_AMTS  

  FROM 
   SCHEMA.COM_HR_TXNS_STAGE_ALL S1
  WHERE 
   S1.ALLOC_TYPE = 'M7' and
   s1.pay_period_id IN (SELECT P.PP_ID
             FROM
              SCHEMA.COM_HR_JEID_PP P
             WHERE
              P.TO_BE_PROCESSED = 'Y' AND
              P.PROCESSED = 'N')) S
  ) X
ON
 (X.TRANS_ID = S.TRANS_ID AND
  S.ALLOC_TYPE = 'M7')

WHEN MATCHED THEN
  UPDATE 
   SET 
     S.CALC_NEW_AMT = X.CALC_NEW_AMT,
     S.CALC_RENEWAL_AMT = X.CALC_RENEWAL_AMT,
     S.CALC_INCREASE_AMT = X.CALC_INCREASE_AMT;
COMMIT;     



/***** SET 'M8' ALLOCATIONS *****/
/* FOR THESE, PI AMOUNT <> 0 AND CUST NI AMOUNT > 0 AND RENEWAL > 0 AND CUST NI > RENEWAL AMT*/
/* USE THE NI AMOUNTS ALLOCATING TO THE RENEWAL AND INCREASE AMOUNTS */

UPDATE SCHEMA.COM_HR_TXNS_STAGE_ALL S
SET S.ALLOC_TYPE = 'M8' -- M FOR MATCH ON NI > RENEWAL AMT AND BOTH VALUES ARE POSITIVE
WHERE
 TRIM(S.ALLOC_TYPE) IS NULL AND
 TRIM(S.CUST_TYPE) = 'ADV' AND
 S.CUST_NI_AMT >= S.CUST_RENEWAL_AMT AND
 S.CUST_RENEWAL_AMT > 0 AND
 S.CUST_NI_AMT > 0 AND
 S.CUST_NEW_AMT = 0 AND
 S.CUMUL_NI_CUST_TYPE_AMT <> 0 and
 s.pay_period_id IN (SELECT P.PP_ID
             FROM
              SCHEMA.COM_HR_JEID_PP P
             WHERE
              P.TO_BE_PROCESSED = 'Y' AND
              P.PROCESSED = 'N');
COMMIT;

MERGE INTO SCHEMA.COM_HR_TXNS_STAGE_ALL S
USING
 (SELECT
  S.TRANS_ID, 
  s.rowid as row_id,
  0 AS CALC_NEW_AMT,
  ROUND(CASE WHEN S.SUM_NI_AMTS >1 OR S.SUM_NI_AMTS <-1 THEN
    (S.CUST_RENEWAL_AMT/S.SUM_NI_AMTS)*S.NI_AMT 
   ELSE
    CASE /* WHEN RENEWAL AMT IS POSITIVE USE POSITIVE NI AMTS FOR ALLOC */ 
         WHEN S.CUST_RENEWAL_AMT > 0 AND S.SUM_POS_NI_AMTS > 0 THEN 
           CASE WHEN S.NI_AMT < 0 THEN NI_AMT
                WHEN S.NI_AMT > 0 THEN
                     S.NI_AMT/S.SUM_POS_NI_AMTS*(S.CUST_RENEWAL_AMT-S.SUM_NEG_NI_AMTS) END 
           
         WHEN S.CUST_RENEWAL_AMT > 0 AND S.SUM_POS_NI_AMTS = 0 THEN 
           CASE WHEN S.NI_AMT < 0 THEN ABS(S.NI_AMT)/ABS(S.SUM_NEG_NI_AMTS)*S.CUST_RENEWAL_AMT
                END
                   
         /* WHEN RENEWAL AMT IS NEGATIVE USE NEGATIVE NI AMTS FOR ALLOC */        
         WHEN S.CUST_RENEWAL_AMT < 0 AND S.SUM_NEG_NI_AMTS < 0 THEN            
           CASE WHEN S.NI_AMT > 0 THEN S.NI_AMT
                WHEN S.NI_AMT < 0 THEN
                     S.NI_AMT/S.SUM_NEG_NI_AMTS*(S.CUST_RENEWAL_AMT-S.SUM_POS_NI_AMTS) END
                   
         WHEN S.CUST_RENEWAL_AMT < 0 AND S.SUM_NEG_NI_AMTS = 0 THEN            
           CASE WHEN S.NI_AMT > 0 THEN (S.NI_AMT/S.SUM_POS_NI_AMTS)*S.CUST_RENEWAL_AMT END          
                   
    END END,2) AS CALC_RENEWAL_AMT,       

  ROUND(CASE WHEN S.SUM_NI_AMTS >1 OR S.SUM_NI_AMTS <-1 THEN
    (S.CUST_INCREASE_AMT/S.SUM_NI_AMTS)*S.NI_AMT 
   ELSE
    CASE /* WHEN INCREASE AMT IS POSITIVE USE POSITIVE NI AMTS FOR ALLOC */ 
         WHEN S.CUST_INCREASE_AMT > 0 AND S.SUM_POS_NI_AMTS > 0 THEN 
           CASE WHEN S.NI_AMT < 0 THEN S.NI_AMT
                WHEN S.NI_AMT > 0 THEN
                     S.NI_AMT/S.SUM_POS_NI_AMTS*(S.CUST_INCREASE_AMT-S.SUM_NEG_NI_AMTS) END 
         
         WHEN CUST_INCREASE_AMT > 0 AND S.SUM_POS_NI_AMTS = 0 THEN 
           CASE WHEN S.NI_AMT < 0 THEN ABS(S.NI_AMT)/ABS(S.SUM_NEG_NI_AMTS)*CUST_INCREASE_AMT
                END
                
         /* WHEN INCREASE AMT IS NEGATIVE USE NEGATIVE NI AMTS FOR ALLOC */          
         WHEN CUST_INCREASE_AMT < 0 AND S.SUM_NEG_NI_AMTS < 0 THEN            
           CASE WHEN S.NI_AMT > 0 THEN NI_AMT
                WHEN S.NI_AMT < 0 THEN
                     S.NI_AMT/S.SUM_NEG_NI_AMTS*(CUST_INCREASE_AMT-S.SUM_POS_NI_AMTS) END
                   
         WHEN CUST_INCREASE_AMT < 0 AND S.SUM_NEG_NI_AMTS = 0 THEN            
           CASE WHEN S.NI_AMT > 0 THEN (S.NI_AMT/S.SUM_POS_NI_AMTS)*CUST_INCREASE_AMT END          
                   
    END END,2) AS CALC_INCREASE_AMT        
                
FROM 
(
 SELECT
    S1.KGEN_PAYEEID, S1.PAY_PERIOD_ID, S1.CUSTOMER_ID, S1.PRODUCT_TYPE, S1.COMP_YEAR,
    S1.COM_IND, S1.CUST_NI_AMT, S1.CUST_PI_AMT, S1.CUST_NEW_AMT, S1.CUST_RENEWAL_AMT,
    S1.CUST_INCREASE_AMT, S1.NEW_RATE, S1.RENEWAL_RATE, S1.INCREASE_RATE, S1.CUST_COM_AMT,
    S1.CUST_TYPE, S1.ITEM_ID, S1.SV_ITEM_ID, S1.PRODUCT_CODE, S1.PRODUCT_ISSUE_NUM,
    S1.PROD_TYPE, S1.UDAC_CODE, S1.NI_AMT, S1.PI_AMT, S1.CUMULATIVE_PI_AMT,
    S1.CUMULATIVE_NI_AMT, S1.TRANS_ID, S1.QUERY_MATCH, 
    S1.ALLOC_TYPE,
    SUM(S1.NI_AMT) OVER
          (PARTITION BY S1.KGEN_PAYEEID,
                        S1.PAY_PERIOD_ID,
                        S1.CUSTOMER_ID,
                        S1.PRODUCT_TYPE,
                        S1.COMP_YEAR) AS SUM_NI_AMTS,
     NVL(SUM(case when S1.NI_AMT > 0 then S1.NI_AMT end) OVER
          (PARTITION BY S1.KGEN_PAYEEID,
                        S1.PAY_PERIOD_ID,
                        S1.CUSTOMER_ID,
                        S1.PRODUCT_TYPE,
                        S1.COMP_YEAR),0) AS SUM_POS_NI_AMTS,   
     NVL(SUM(case when S1.NI_AMT < 0 then S1.NI_AMT end) OVER
          (PARTITION BY S1.KGEN_PAYEEID,
                        S1.PAY_PERIOD_ID,
                        S1.CUSTOMER_ID,
                        S1.PRODUCT_TYPE,
                        S1.COMP_YEAR),0) AS SUM_NEG_NI_AMTS  

  FROM 
   SCHEMA.COM_HR_TXNS_STAGE_ALL S1
  WHERE 
   S1.ALLOC_TYPE = 'M8' and
   s1.pay_period_id IN (SELECT P.PP_ID
             FROM
              SCHEMA.COM_HR_JEID_PP P
             WHERE
              P.TO_BE_PROCESSED = 'Y' AND
              P.PROCESSED = 'N')) S
  ) X
ON
 (X.TRANS_ID = S.TRANS_ID AND
  x.row_id = s.rowid and
  S.ALLOC_TYPE = 'M8')

WHEN MATCHED THEN
  UPDATE 
   SET 
     S.CALC_NEW_AMT = X.CALC_NEW_AMT,
     S.CALC_RENEWAL_AMT = X.CALC_RENEWAL_AMT,
     S.CALC_INCREASE_AMT = X.CALC_INCREASE_AMT;
COMMIT;     


/***** SET 'NX' ALLOCATIONS *****/
/*NO ALLOCATION PERFORMED BECAUSE THERE IS NO VALUE TO ALLOCATE */

UPDATE SCHEMA.COM_HR_TXNS_STAGE_ALL S
SET S.ALLOC_TYPE = 'NX'
WHERE
 TRIM(S.ALLOC_TYPE) IS NULL AND
 TRIM(S.CUST_TYPE) = 'NEW' AND
 S.CUST_NEW_AMT = 0 AND
 S.CUST_DIG_NEW_SEM_AMT = 0 and
 s.pay_period_id IN (SELECT P.PP_ID
             FROM
              SCHEMA.COM_HR_JEID_PP P
             WHERE
              P.TO_BE_PROCESSED = 'Y' AND
              P.PROCESSED = 'N');
COMMIT;   

UPDATE SCHEMA.COM_HR_TXNS_STAGE_ALL S
SET 
 S.CALC_NEW_AMT = 0,
 S.CALC_RENEWAL_AMT = 0,
 S.CALC_INCREASE_AMT = 0
WHERE 
 S.ALLOC_TYPE = 'NX' and
 s.pay_period_id IN (SELECT P.PP_ID
             FROM
              SCHEMA.COM_HR_JEID_PP P
             WHERE
              P.TO_BE_PROCESSED = 'Y' AND
              P.PROCESSED = 'N');
COMMIT;


/***** SET 'N4' ALLOCATIONS *****/
/* FOR THESE RECORDS, THE NEW TRANS NI AMOUNTS EQUALLED THE CUST DETAIL NEW_AMT*/
/* ALLOCATE NI_AMT ONLY */

UPDATE SCHEMA.COM_HR_TXNS_STAGE_ALL S
SET S.ALLOC_TYPE = 'N4'
WHERE
 TRIM(S.CUST_TYPE) = 'NEW'
 AND S.CUMUL_NI_CUST_TYPE_AMT = S.CUST_NEW_AMT
 AND TRIM(S.ALLOC_TYPE) IS NULL  
 AND S.SOURCE = 'N' and
 s.pay_period_id IN (SELECT P.PP_ID
             FROM
              SCHEMA.COM_HR_JEID_PP P
             WHERE
              P.TO_BE_PROCESSED = 'Y' AND
              P.PROCESSED = 'N');
COMMIT;

UPDATE SCHEMA.COM_HR_TXNS_STAGE_ALL S
SET
  S.CALC_NEW_AMT = S.NI_AMT,
  S.CALC_RENEWAL_AMT = 0,
  S.CALC_INCREASE_AMT = 0
WHERE 
 S.ALLOC_TYPE = 'N4' and
 s.pay_period_id IN (SELECT P.PP_ID
             FROM
              SCHEMA.COM_HR_JEID_PP P
             WHERE
              P.TO_BE_PROCESSED = 'Y' AND
              P.PROCESSED = 'N');
COMMIT; 


/***** SET 'PX' ALLOCATIONS *****/
/*NO ALLOCATION PERFORMED BECAUSE THERE IS NO VALUE TO ALLOCATE */

UPDATE SCHEMA.COM_HR_TXNS_STAGE_ALL S
SET S.ALLOC_TYPE = 'PX'
WHERE
 TRIM(S.ALLOC_TYPE) IS NULL AND
 TRIM(S.CUST_TYPE) = 'ADV' AND
 S.CUST_RENEWAL_AMT = 0 AND
 S.CUST_INCREASE_AMT = 0 and
 s.pay_period_id IN (SELECT P.PP_ID
             FROM
              SCHEMA.COM_HR_JEID_PP P
             WHERE
              P.TO_BE_PROCESSED = 'Y' AND
              P.PROCESSED = 'N');
COMMIT;   

UPDATE SCHEMA.COM_HR_TXNS_STAGE_ALL S
SET 
 S.CALC_NEW_AMT = 0,
 S.CALC_RENEWAL_AMT = 0,
 S.CALC_INCREASE_AMT = 0,
 S.CALC_DIG_NEW_SEM_AMT = 0
WHERE 
 S.ALLOC_TYPE = 'PX' and
 s.pay_period_id IN (SELECT P.PP_ID
             FROM
              SCHEMA.COM_HR_JEID_PP P
             WHERE
              P.TO_BE_PROCESSED = 'Y' AND
              P.PROCESSED = 'N');
COMMIT;


/***** SET 'P2' ALLOCATIONS *****/
/* FOR THESE RECORDS, THE ADV TRANS NI AMOUNTS EQUALLED THE CUST DETAIL RENEWAL AND INCREASE AMOUNTS*/
/* ALLOCATE NI_AMT ONLY TO RENEWAL AND INCREASE AMOUNTS ONLY */

UPDATE SCHEMA.COM_HR_TXNS_STAGE_ALL S
SET S.ALLOC_TYPE = 'P2'
WHERE
 TRIM(S.CUST_TYPE) = 'ADV'
 AND S.CUMUL_NI_CUST_TYPE_AMT = S.CUST_RENEWAL_AMT + S.CUST_INCREASE_AMT
 AND S.CUMUL_NI_CUST_TYPE_AMT <> 0
 AND TRIM(S.ALLOC_TYPE) IS NULL and
 s.pay_period_id IN (SELECT P.PP_ID
             FROM
              SCHEMA.COM_HR_JEID_PP P
             WHERE
              P.TO_BE_PROCESSED = 'Y' AND
              P.PROCESSED = 'N');
COMMIT; 

MERGE INTO SCHEMA.COM_HR_TXNS_STAGE_ALL S
USING
 (SELECT
  S.CUSTDET_TRANS_ID,
  S.TRANS_ID, 
  0 AS CALC_NEW_AMT,
  ROUND(CASE WHEN S.SUM_NI_AMTS >1 OR S.SUM_NI_AMTS <-1 THEN
    (S.CUST_RENEWAL_AMT/S.SUM_NI_AMTS)*S.NI_AMT 
   ELSE
    CASE /* WHEN RENEWAL AMT IS POSITIVE USE POSITIVE NI AMTS FOR ALLOC */ 
         WHEN S.CUST_RENEWAL_AMT > 0 AND S.SUM_POS_NI_AMTS > 0 THEN 
           CASE WHEN S.NI_AMT < 0 THEN NI_AMT
                WHEN S.NI_AMT > 0 THEN
                     S.NI_AMT/S.SUM_POS_NI_AMTS*(S.CUST_RENEWAL_AMT-S.SUM_NEG_NI_AMTS) END 
           
         WHEN S.CUST_RENEWAL_AMT > 0 AND S.SUM_POS_NI_AMTS = 0 THEN 
           CASE WHEN S.NI_AMT < 0 THEN ABS(S.NI_AMT)/ABS(S.SUM_NEG_NI_AMTS)*S.CUST_RENEWAL_AMT
                END
                   
         /* WHEN RENEWAL AMT IS NEGATIVE USE NEGATIVE NI AMTS FOR ALLOC */        
         WHEN S.CUST_RENEWAL_AMT < 0 AND S.SUM_NEG_NI_AMTS < 0 THEN            
           CASE WHEN S.NI_AMT > 0 THEN S.NI_AMT
                WHEN S.NI_AMT < 0 THEN
                     S.NI_AMT/S.SUM_NEG_NI_AMTS*(S.CUST_RENEWAL_AMT-S.SUM_POS_NI_AMTS) END
                   
         WHEN S.CUST_RENEWAL_AMT < 0 AND S.SUM_NEG_NI_AMTS = 0 THEN            
           CASE WHEN S.NI_AMT > 0 THEN (S.NI_AMT/S.SUM_POS_NI_AMTS)*S.CUST_RENEWAL_AMT END          
                   
    END END,2) AS CALC_RENEWAL_AMT,       

  ROUND(CASE WHEN S.SUM_NI_AMTS >1 OR S.SUM_NI_AMTS <-1 THEN
    (S.CUST_INCREASE_AMT/S.SUM_NI_AMTS)*S.NI_AMT 
   ELSE
    CASE /* WHEN INCREASE AMT IS POSITIVE USE POSITIVE NI AMTS FOR ALLOC */ 
         WHEN S.CUST_INCREASE_AMT > 0 AND S.SUM_POS_NI_AMTS > 0 THEN 
           CASE WHEN S.NI_AMT < 0 THEN S.NI_AMT
                WHEN S.NI_AMT > 0 THEN
                     S.NI_AMT/S.SUM_POS_NI_AMTS*(S.CUST_INCREASE_AMT-S.SUM_NEG_NI_AMTS) END 
         
         WHEN CUST_INCREASE_AMT > 0 AND S.SUM_POS_NI_AMTS = 0 THEN 
           CASE WHEN S.NI_AMT < 0 THEN ABS(S.NI_AMT)/ABS(S.SUM_NEG_NI_AMTS)*CUST_INCREASE_AMT
                END
                
         /* WHEN INCREASE AMT IS NEGATIVE USE NEGATIVE NI AMTS FOR ALLOC */          
         WHEN CUST_INCREASE_AMT < 0 AND S.SUM_NEG_NI_AMTS < 0 THEN            
           CASE WHEN S.NI_AMT > 0 THEN NI_AMT
                WHEN S.NI_AMT < 0 THEN
                     S.NI_AMT/S.SUM_NEG_NI_AMTS*(CUST_INCREASE_AMT-S.SUM_POS_NI_AMTS) END
                   
         WHEN CUST_INCREASE_AMT < 0 AND S.SUM_NEG_NI_AMTS = 0 THEN            
           CASE WHEN S.NI_AMT > 0 THEN (S.NI_AMT/S.SUM_POS_NI_AMTS)*CUST_INCREASE_AMT END          
                   
    END END,2) AS CALC_INCREASE_AMT        
                
FROM 
(
 SELECT
    S1.KGEN_PAYEEID, S1.PAY_PERIOD_ID, S1.CUSTOMER_ID, S1.PRODUCT_TYPE, S1.COMP_YEAR,
    S1.COM_IND, S1.CUST_NI_AMT, S1.CUST_PI_AMT, S1.CUST_NEW_AMT, S1.CUST_RENEWAL_AMT,
    S1.CUST_INCREASE_AMT, S1.NEW_RATE, S1.RENEWAL_RATE, S1.INCREASE_RATE, S1.CUST_COM_AMT,
    S1.CUST_TYPE, S1.ITEM_ID, S1.SV_ITEM_ID, S1.PRODUCT_CODE, S1.PRODUCT_ISSUE_NUM,
    S1.PROD_TYPE, S1.UDAC_CODE, S1.NI_AMT, S1.PI_AMT, S1.CUMULATIVE_PI_AMT,
    S1.CUMULATIVE_NI_AMT, S1.TRANS_ID, S1.QUERY_MATCH, S1.CUSTDET_TRANS_ID,
    S1.ALLOC_TYPE,
    SUM(S1.NI_AMT) OVER
          (PARTITION BY S1.KGEN_PAYEEID,
                        S1.PAY_PERIOD_ID,
                        S1.CUSTOMER_ID,
                        S1.PRODUCT_TYPE,
                        S1.COMP_YEAR) AS SUM_NI_AMTS,
     NVL(SUM(case when S1.NI_AMT > 0 then S1.NI_AMT end) OVER
          (PARTITION BY S1.KGEN_PAYEEID,
                        S1.PAY_PERIOD_ID,
                        S1.CUSTOMER_ID,
                        S1.PRODUCT_TYPE,
                        S1.COMP_YEAR),0) AS SUM_POS_NI_AMTS,   
     NVL(SUM(case when S1.NI_AMT < 0 then S1.NI_AMT end) OVER
          (PARTITION BY S1.KGEN_PAYEEID,
                        S1.PAY_PERIOD_ID,
                        S1.CUSTOMER_ID,
                        S1.PRODUCT_TYPE,
                        S1.COMP_YEAR),0) AS SUM_NEG_NI_AMTS  

  FROM 
   SCHEMA.COM_HR_TXNS_STAGE_ALL S1
  WHERE 
   S1.ALLOC_TYPE = 'P2' and
   s1.pay_period_id IN (SELECT P.PP_ID
             FROM
              SCHEMA.COM_HR_JEID_PP P
             WHERE
              P.TO_BE_PROCESSED = 'Y' AND
              P.PROCESSED = 'N')) S
  ) X
ON
 (X.TRANS_ID = S.TRANS_ID AND
  X.CUSTDET_TRANS_ID = S.CUSTDET_TRANS_ID AND
  S.ALLOC_TYPE = 'P2')

WHEN MATCHED THEN
  UPDATE 
   SET 
     S.CALC_NEW_AMT = X.CALC_NEW_AMT,
     S.CALC_RENEWAL_AMT = X.CALC_RENEWAL_AMT,
     S.CALC_INCREASE_AMT = X.CALC_INCREASE_AMT;
COMMIT;


/***** SET 'M9' ALLOCATIONS *****/
/* ADV RECORDS THAT HAVE A CUMUL TYPE DOLLAR DIFFERENT FRONM CUST INCREASE AND RENEWAL */
/* ALLOCATE NI AMOUNTS ACROSS RENEWAL AND INCREASE COLUMNS */

UPDATE SCHEMA.COM_HR_TXNS_STAGE_ALL S
SET S.ALLOC_TYPE = 'M9'
WHERE
 TRIM(S.CUST_TYPE) = 'ADV'
 AND TRIM(S.ALLOC_TYPE) IS NULL
 AND S.CUMUL_NI_CUST_TYPE_AMT <> S.CUST_RENEWAL_AMT + S.CUST_INCREASE_AMT 
 AND S.CUMUL_NI_CUST_TYPE_AMT <> 0
 AND ABS(S.CUST_RENEWAL_AMT) + ABS(S.CUST_INCREASE_AMT) <> 0 and
 s.pay_period_id IN (SELECT P.PP_ID
             FROM
              SCHEMA.COM_HR_JEID_PP P
             WHERE
              P.TO_BE_PROCESSED = 'Y' AND
              P.PROCESSED = 'N');
COMMIT;

MERGE INTO SCHEMA.COM_HR_TXNS_STAGE_ALL S
USING
 (SELECT
  S.CUSTDET_TRANS_ID,
  S.TRANS_ID, 
  0 AS CALC_NEW_AMT,
  ROUND(CASE WHEN S.SUM_NI_AMTS >1 OR S.SUM_NI_AMTS <-1 THEN
    (S.CUST_RENEWAL_AMT/S.SUM_NI_AMTS)*S.NI_AMT 
   ELSE
    CASE /* WHEN RENEWAL AMT IS POSITIVE USE POSITIVE NI AMTS FOR ALLOC */ 
         WHEN S.CUST_RENEWAL_AMT > 0 AND S.SUM_POS_NI_AMTS > 0 THEN 
           CASE WHEN S.NI_AMT < 0 THEN NI_AMT
                WHEN S.NI_AMT > 0 THEN
                     S.NI_AMT/S.SUM_POS_NI_AMTS*(S.CUST_RENEWAL_AMT-S.SUM_NEG_NI_AMTS) END 
           
         WHEN S.CUST_RENEWAL_AMT > 0 AND S.SUM_POS_NI_AMTS = 0 THEN 
           CASE WHEN S.NI_AMT < 0 THEN ABS(S.NI_AMT)/ABS(S.SUM_NEG_NI_AMTS)*S.CUST_RENEWAL_AMT
                END
                   
         /* WHEN RENEWAL AMT IS NEGATIVE USE NEGATIVE NI AMTS FOR ALLOC */        
         WHEN S.CUST_RENEWAL_AMT < 0 AND S.SUM_NEG_NI_AMTS < 0 THEN            
           CASE WHEN S.NI_AMT > 0 THEN S.NI_AMT
                WHEN S.NI_AMT < 0 THEN
                     S.NI_AMT/S.SUM_NEG_NI_AMTS*(S.CUST_RENEWAL_AMT-S.SUM_POS_NI_AMTS) END
                   
         WHEN S.CUST_RENEWAL_AMT < 0 AND S.SUM_NEG_NI_AMTS = 0 THEN            
           CASE WHEN S.NI_AMT > 0 THEN (S.NI_AMT/S.SUM_POS_NI_AMTS)*S.CUST_RENEWAL_AMT END          
                   
    END END,2) AS CALC_RENEWAL_AMT,       

  ROUND(CASE WHEN S.SUM_NI_AMTS >1 OR S.SUM_NI_AMTS <-1 THEN
    (S.CUST_INCREASE_AMT/S.SUM_NI_AMTS)*S.NI_AMT 
   ELSE
    CASE /* WHEN INCREASE AMT IS POSITIVE USE POSITIVE NI AMTS FOR ALLOC */ 
         WHEN S.CUST_INCREASE_AMT > 0 AND S.SUM_POS_NI_AMTS > 0 THEN 
           CASE WHEN S.NI_AMT < 0 THEN S.NI_AMT
                WHEN S.NI_AMT > 0 THEN
                     S.NI_AMT/S.SUM_POS_NI_AMTS*(S.CUST_INCREASE_AMT-S.SUM_NEG_NI_AMTS) END 
         
         WHEN CUST_INCREASE_AMT > 0 AND S.SUM_POS_NI_AMTS = 0 THEN 
           CASE WHEN S.NI_AMT < 0 THEN ABS(S.NI_AMT)/ABS(S.SUM_NEG_NI_AMTS)*CUST_INCREASE_AMT
                END
                
         /* WHEN INCREASE AMT IS NEGATIVE USE NEGATIVE NI AMTS FOR ALLOC */          
         WHEN CUST_INCREASE_AMT < 0 AND S.SUM_NEG_NI_AMTS < 0 THEN            
           CASE WHEN S.NI_AMT > 0 THEN NI_AMT
                WHEN S.NI_AMT < 0 THEN
                     S.NI_AMT/S.SUM_NEG_NI_AMTS*(CUST_INCREASE_AMT-S.SUM_POS_NI_AMTS) END
                   
         WHEN CUST_INCREASE_AMT < 0 AND S.SUM_NEG_NI_AMTS = 0 THEN            
           CASE WHEN S.NI_AMT > 0 THEN (S.NI_AMT/S.SUM_POS_NI_AMTS)*CUST_INCREASE_AMT END          
                   
    END END,2) AS CALC_INCREASE_AMT        
                
FROM 
(
 SELECT
    S1.KGEN_PAYEEID, S1.PAY_PERIOD_ID, S1.CUSTOMER_ID, S1.PRODUCT_TYPE, S1.COMP_YEAR,
    S1.COM_IND, S1.CUST_NI_AMT, S1.CUST_PI_AMT, S1.CUST_NEW_AMT, S1.CUST_RENEWAL_AMT,
    S1.CUST_INCREASE_AMT, S1.NEW_RATE, S1.RENEWAL_RATE, S1.INCREASE_RATE, S1.CUST_COM_AMT,
    S1.CUST_TYPE, S1.ITEM_ID, S1.SV_ITEM_ID, S1.PRODUCT_CODE, S1.PRODUCT_ISSUE_NUM,
    S1.PROD_TYPE, S1.UDAC_CODE, S1.NI_AMT, S1.PI_AMT, S1.CUMULATIVE_PI_AMT,
    S1.CUMULATIVE_NI_AMT, S1.TRANS_ID, S1.QUERY_MATCH, S1.CUSTDET_TRANS_ID,
    S1.ALLOC_TYPE,
    SUM(S1.NI_AMT) OVER
          (PARTITION BY S1.KGEN_PAYEEID,
                        S1.PAY_PERIOD_ID,
                        S1.CUSTOMER_ID,
                        S1.PRODUCT_TYPE,
                        S1.COMP_YEAR) AS SUM_NI_AMTS,
     NVL(SUM(case when S1.NI_AMT > 0 then S1.NI_AMT end) OVER
          (PARTITION BY S1.KGEN_PAYEEID,
                        S1.PAY_PERIOD_ID,
                        S1.CUSTOMER_ID,
                        S1.PRODUCT_TYPE,
                        S1.COMP_YEAR),0) AS SUM_POS_NI_AMTS,   
     NVL(SUM(case when S1.NI_AMT < 0 then S1.NI_AMT end) OVER
          (PARTITION BY S1.KGEN_PAYEEID,
                        S1.PAY_PERIOD_ID,
                        S1.CUSTOMER_ID,
                        S1.PRODUCT_TYPE,
                        S1.COMP_YEAR),0) AS SUM_NEG_NI_AMTS  

  FROM 
   SCHEMA.COM_HR_TXNS_STAGE_ALL S1
  WHERE 
   S1.ALLOC_TYPE = 'M9' and
   s1.pay_period_id IN (SELECT P.PP_ID
             FROM
              SCHEMA.COM_HR_JEID_PP P
             WHERE
              P.TO_BE_PROCESSED = 'Y' AND
              P.PROCESSED = 'N')) S
  ) X
ON
 (X.TRANS_ID = S.TRANS_ID AND
  X.CUSTDET_TRANS_ID = S.CUSTDET_TRANS_ID AND
  S.ALLOC_TYPE = 'M9')

WHEN MATCHED THEN
  UPDATE 
   SET 
     S.CALC_NEW_AMT = X.CALC_NEW_AMT,
     S.CALC_RENEWAL_AMT = X.CALC_RENEWAL_AMT,
     S.CALC_INCREASE_AMT = X.CALC_INCREASE_AMT;
COMMIT;


/***** SET 'M10 ALLOCATIONS *****/
MERGE INTO SCHEMA.COM_HR_TXNS_STAGE_ALL S
USING
 (
  SELECT
   X.TRANS_ID,
   X.CUSTDET_TRANS_ID
  FROM 
   (
    SELECT
     S.KGEN_PAYEEID,
     S.PAY_PERIOD_ID,
     S.CUSTOMER_ID,
     S.PRODUCT_TYPE,
     S.COMP_YEAR,  
     S.TRANS_ID,
     S.CUSTDET_TRANS_ID,
     SUM(ABS(S.PI_AMT)) OVER
              (PARTITION BY S.KGEN_PAYEEID,
                            S.PAY_PERIOD_ID,
                            S.CUSTOMER_ID,
                            S.PRODUCT_TYPE,
                            S.COMP_YEAR) SUM_ABS_PI_AMT
     
    FROM
     SCHEMA.COM_HR_TXNS_STAGE_ALL S
    WHERE
     TRIM(S.CUST_TYPE) = 'ADV'
     AND TRIM(S.ALLOC_TYPE) IS NULL AND 
     S.CUST_PI_AMT <> 0 and
     s.pay_period_id IN (SELECT P.PP_ID
             FROM
              SCHEMA.COM_HR_JEID_PP P
             WHERE
              P.TO_BE_PROCESSED = 'Y' AND
              P.PROCESSED = 'N')
   ) X
  WHERE
   X.SUM_ABS_PI_AMT <> 0 
 ) X
ON 
 (X.TRANS_ID = S.TRANS_ID AND
  X.CUSTDET_TRANS_ID = S.CUSTDET_TRANS_ID
  ) 

WHEN MATCHED THEN
  UPDATE 
   SET S.ALLOC_TYPE = 'M10'
WHERE
 TRIM(S.ALLOC_TYPE) IS NULL AND
 TRIM(S.CUST_TYPE) = 'ADV' and
 s.pay_period_id IN (SELECT P.PP_ID
             FROM
              SCHEMA.COM_HR_JEID_PP P
             WHERE
              P.TO_BE_PROCESSED = 'Y' AND
              P.PROCESSED = 'N');
COMMIT;

MERGE INTO SCHEMA.COM_HR_TXNS_STAGE_ALL S
USING
 (SELECT
  S.CUSTDET_TRANS_ID,
  S.TRANS_ID, 
  0 AS CALC_NEW_AMT,
  ROUND(CASE WHEN S.SUM_PI_AMTS >1 OR S.SUM_PI_AMTS <-1 THEN
    (S.CUST_RENEWAL_AMT/S.SUM_PI_AMTS)*S.PI_AMT 
   ELSE
    CASE /* WHEN RENEWAL AMT IS POSITIVE USE POSITIVE PI AMTS FOR ALLOC */ 
         WHEN S.CUST_RENEWAL_AMT > 0 AND S.SUM_POS_PI_AMTS > 0 THEN 
           CASE WHEN S.PI_AMT < 0 THEN PI_AMT
                WHEN S.PI_AMT > 0 THEN
                     S.PI_AMT/S.SUM_POS_PI_AMTS*(S.CUST_RENEWAL_AMT-S.SUM_NEG_PI_AMTS) END 
           
         WHEN S.CUST_RENEWAL_AMT > 0 AND S.SUM_POS_PI_AMTS = 0 THEN 
           CASE WHEN S.PI_AMT < 0 THEN ABS(S.PI_AMT)/ABS(S.SUM_NEG_PI_AMTS)*S.CUST_RENEWAL_AMT
                END
                   
         /* WHEN RENEWAL AMT IS NEGATIVE USE NEGATIVE PI AMTS FOR ALLOC */        
         WHEN S.CUST_RENEWAL_AMT < 0 AND S.SUM_NEG_PI_AMTS < 0 THEN            
           CASE WHEN S.PI_AMT > 0 THEN S.PI_AMT
                WHEN S.PI_AMT < 0 THEN
                     S.PI_AMT/S.SUM_NEG_PI_AMTS*(S.CUST_RENEWAL_AMT-S.SUM_POS_PI_AMTS) END
                   
         WHEN S.CUST_RENEWAL_AMT < 0 AND S.SUM_NEG_PI_AMTS = 0 THEN            
           CASE WHEN S.PI_AMT > 0 THEN (S.PI_AMT/S.SUM_POS_PI_AMTS)*S.CUST_RENEWAL_AMT END          
                   
    END END,2) AS CALC_RENEWAL_AMT,       

  ROUND(CASE WHEN S.SUM_PI_AMTS >1 OR S.SUM_PI_AMTS <-1 THEN
    (S.CUST_INCREASE_AMT/S.SUM_PI_AMTS)*S.PI_AMT 
   ELSE
    CASE /* WHEN INCREASE AMT IS POSITIVE USE POSITIVE PI AMTS FOR ALLOC */ 
         WHEN S.CUST_INCREASE_AMT > 0 AND S.SUM_POS_PI_AMTS > 0 THEN 
           CASE WHEN S.PI_AMT < 0 THEN S.PI_AMT
                WHEN S.PI_AMT > 0 THEN
                     S.PI_AMT/S.SUM_POS_PI_AMTS*(S.CUST_INCREASE_AMT-S.SUM_NEG_PI_AMTS) END 
         
         WHEN CUST_INCREASE_AMT > 0 AND S.SUM_POS_PI_AMTS = 0 THEN 
           CASE WHEN S.PI_AMT < 0 THEN ABS(S.PI_AMT)/ABS(S.SUM_NEG_PI_AMTS)*CUST_INCREASE_AMT
                END
                
         /* WHEN INCREASE AMT IS NEGATIVE USE NEGATIVE PI AMTS FOR ALLOC */          
         WHEN CUST_INCREASE_AMT < 0 AND S.SUM_NEG_PI_AMTS < 0 THEN            
           CASE WHEN S.PI_AMT > 0 THEN PI_AMT
                WHEN S.PI_AMT < 0 THEN
                     S.PI_AMT/S.SUM_NEG_PI_AMTS*(CUST_INCREASE_AMT-S.SUM_POS_PI_AMTS) END
                   
         WHEN CUST_INCREASE_AMT < 0 AND S.SUM_NEG_PI_AMTS = 0 THEN            
           CASE WHEN S.PI_AMT > 0 THEN (S.PI_AMT/S.SUM_POS_PI_AMTS)*CUST_INCREASE_AMT END          
                   
    END END,2) AS CALC_INCREASE_AMT        
                
FROM 
(
 SELECT
    S1.KGEN_PAYEEID, S1.PAY_PERIOD_ID, S1.CUSTOMER_ID, S1.PRODUCT_TYPE, S1.COMP_YEAR,
    S1.COM_IND, S1.CUST_NI_AMT, S1.CUST_PI_AMT, S1.CUST_NEW_AMT, S1.CUST_RENEWAL_AMT,
    S1.CUST_INCREASE_AMT, S1.NEW_RATE, S1.RENEWAL_RATE, S1.INCREASE_RATE, S1.CUST_COM_AMT,
    S1.CUST_TYPE, S1.ITEM_ID, S1.SV_ITEM_ID, S1.PRODUCT_CODE, S1.PRODUCT_ISSUE_NUM,
    S1.PROD_TYPE, S1.UDAC_CODE, S1.NI_AMT, S1.PI_AMT, S1.CUMULATIVE_PI_AMT,
    S1.CUMULATIVE_NI_AMT, S1.TRANS_ID, S1.QUERY_MATCH, S1.CUSTDET_TRANS_ID,
    S1.ALLOC_TYPE,
    SUM(S1.PI_AMT) OVER
          (PARTITION BY S1.KGEN_PAYEEID,
                        S1.PAY_PERIOD_ID,
                        S1.CUSTOMER_ID,
                        S1.PRODUCT_TYPE,
                        S1.COMP_YEAR) AS SUM_PI_AMTS,
     NVL(SUM(case when S1.PI_AMT > 0 then S1.PI_AMT end) OVER
          (PARTITION BY S1.KGEN_PAYEEID,
                        S1.PAY_PERIOD_ID,
                        S1.CUSTOMER_ID,
                        S1.PRODUCT_TYPE,
                        S1.COMP_YEAR),0) AS SUM_POS_PI_AMTS,   
     NVL(SUM(case when S1.PI_AMT < 0 then S1.PI_AMT end) OVER
          (PARTITION BY S1.KGEN_PAYEEID,
                        S1.PAY_PERIOD_ID,
                        S1.CUSTOMER_ID,
                        S1.PRODUCT_TYPE,
                        S1.COMP_YEAR),0) AS SUM_NEG_PI_AMTS  

  FROM 
   SCHEMA.COM_HR_TXNS_STAGE_ALL S1
  WHERE 
   S1.ALLOC_TYPE = 'M10' and
   s1.pay_period_id IN (SELECT P.PP_ID
             FROM
              SCHEMA.COM_HR_JEID_PP P
             WHERE
              P.TO_BE_PROCESSED = 'Y' AND
              P.PROCESSED = 'N')) S
  ) X
ON
 (X.TRANS_ID = S.TRANS_ID AND
  X.CUSTDET_TRANS_ID = S.CUSTDET_TRANS_ID AND
  S.ALLOC_TYPE = 'M10')

WHEN MATCHED THEN
  UPDATE 
   SET 
     S.CALC_NEW_AMT = X.CALC_NEW_AMT,
     S.CALC_RENEWAL_AMT = X.CALC_RENEWAL_AMT,
     S.CALC_INCREASE_AMT = X.CALC_INCREASE_AMT;
COMMIT;


/***** SET 'M11' ALLOCATIONS *****/
MERGE INTO SCHEMA.COM_HR_TXNS_STAGE_ALL S
USING
 (
  SELECT
   X.TRANS_ID,
   X.CUSTDET_TRANS_ID
  FROM 
   (
    SELECT
     S.KGEN_PAYEEID,
     S.PAY_PERIOD_ID,
     S.CUSTOMER_ID,
     S.PRODUCT_TYPE,
     S.COMP_YEAR,  
     S.TRANS_ID,
     S.CUSTDET_TRANS_ID,
     SUM(ABS(S.NI_AMT)) OVER
              (PARTITION BY S.KGEN_PAYEEID,
                            S.PAY_PERIOD_ID,
                            S.CUSTOMER_ID,
                            S.PRODUCT_TYPE,
                            S.COMP_YEAR) SUM_ABS_NI_AMT
     
    FROM
     SCHEMA.COM_HR_TXNS_STAGE_ALL S
    WHERE
     TRIM(S.CUST_TYPE) = 'ADV'
     AND TRIM(S.ALLOC_TYPE) IS NULL AND 
     S.CUST_NI_AMT <> 0 and
     s.pay_period_id IN (SELECT P.PP_ID
                 FROM
                  SCHEMA.COM_HR_JEID_PP P
                 WHERE
                  P.TO_BE_PROCESSED = 'Y' AND
                  P.PROCESSED = 'N')     
   ) X
  WHERE
   X.SUM_ABS_NI_AMT <> 0 
 ) X
ON 
 (X.TRANS_ID = S.TRANS_ID AND
  X.CUSTDET_TRANS_ID = S.CUSTDET_TRANS_ID
  ) 

WHEN MATCHED THEN
  UPDATE 
   SET S.ALLOC_TYPE = 'M11'
WHERE
 TRIM(S.ALLOC_TYPE) IS NULL AND
 TRIM(S.CUST_TYPE) = 'ADV' and
 s.pay_period_id IN (SELECT P.PP_ID
             FROM
              SCHEMA.COM_HR_JEID_PP P
             WHERE
              P.TO_BE_PROCESSED = 'Y' AND
              P.PROCESSED = 'N') ;
COMMIT;

MERGE INTO SCHEMA.COM_HR_TXNS_STAGE_ALL S
USING
 (SELECT
  S.CUSTDET_TRANS_ID,
  S.TRANS_ID, 
  0 AS CALC_NEW_AMT,
  ROUND(CASE WHEN S.SUM_NI_AMTS >1 OR S.SUM_NI_AMTS <-1 THEN
    (S.CUST_RENEWAL_AMT/S.SUM_NI_AMTS)*S.NI_AMT 
   ELSE
    CASE /* WHEN RENEWAL AMT IS POSITIVE USE POSITIVE NI AMTS FOR ALLOC */ 
         WHEN S.CUST_RENEWAL_AMT > 0 AND S.SUM_POS_NI_AMTS > 0 THEN 
           CASE WHEN S.NI_AMT < 0 THEN NI_AMT
                WHEN S.NI_AMT > 0 THEN
                     S.NI_AMT/S.SUM_POS_NI_AMTS*(S.CUST_RENEWAL_AMT-S.SUM_NEG_NI_AMTS) END 
           
         WHEN S.CUST_RENEWAL_AMT > 0 AND S.SUM_POS_NI_AMTS = 0 THEN 
           CASE WHEN S.NI_AMT < 0 THEN ABS(S.NI_AMT)/ABS(S.SUM_NEG_NI_AMTS)*S.CUST_RENEWAL_AMT
                END
                   
         /* WHEN RENEWAL AMT IS NEGATIVE USE NEGATIVE NI AMTS FOR ALLOC */        
         WHEN S.CUST_RENEWAL_AMT < 0 AND S.SUM_NEG_NI_AMTS < 0 THEN            
           CASE WHEN S.NI_AMT > 0 THEN S.NI_AMT
                WHEN S.NI_AMT < 0 THEN
                     S.NI_AMT/S.SUM_NEG_NI_AMTS*(S.CUST_RENEWAL_AMT-S.SUM_POS_NI_AMTS) END
                   
         WHEN S.CUST_RENEWAL_AMT < 0 AND S.SUM_NEG_NI_AMTS = 0 THEN            
           CASE WHEN S.NI_AMT > 0 THEN (S.NI_AMT/S.SUM_POS_NI_AMTS)*S.CUST_RENEWAL_AMT END          
                   
    END END,2) AS CALC_RENEWAL_AMT,       

  ROUND(CASE WHEN S.SUM_NI_AMTS >1 OR S.SUM_NI_AMTS <-1 THEN
    (S.CUST_INCREASE_AMT/S.SUM_NI_AMTS)*S.NI_AMT 
   ELSE
    CASE /* WHEN INCREASE AMT IS POSITIVE USE POSITIVE NI AMTS FOR ALLOC */ 
         WHEN S.CUST_INCREASE_AMT > 0 AND S.SUM_POS_NI_AMTS > 0 THEN 
           CASE WHEN S.NI_AMT < 0 THEN S.NI_AMT
                WHEN S.NI_AMT > 0 THEN
                     S.NI_AMT/S.SUM_POS_NI_AMTS*(S.CUST_INCREASE_AMT-S.SUM_NEG_NI_AMTS) END 
         
         WHEN CUST_INCREASE_AMT > 0 AND S.SUM_POS_NI_AMTS = 0 THEN 
           CASE WHEN S.NI_AMT < 0 THEN ABS(S.NI_AMT)/ABS(S.SUM_NEG_NI_AMTS)*CUST_INCREASE_AMT
                END
                
         /* WHEN INCREASE AMT IS NEGATIVE USE NEGATIVE NI AMTS FOR ALLOC */          
         WHEN CUST_INCREASE_AMT < 0 AND S.SUM_NEG_NI_AMTS < 0 THEN            
           CASE WHEN S.NI_AMT > 0 THEN NI_AMT
                WHEN S.NI_AMT < 0 THEN
                     S.NI_AMT/S.SUM_NEG_NI_AMTS*(CUST_INCREASE_AMT-S.SUM_POS_NI_AMTS) END
                   
         WHEN CUST_INCREASE_AMT < 0 AND S.SUM_NEG_NI_AMTS = 0 THEN            
           CASE WHEN S.NI_AMT > 0 THEN (S.NI_AMT/S.SUM_POS_NI_AMTS)*CUST_INCREASE_AMT END          
                   
    END END,2) AS CALC_INCREASE_AMT        
                
FROM 
(
 SELECT
    S1.KGEN_PAYEEID, S1.PAY_PERIOD_ID, S1.CUSTOMER_ID, S1.PRODUCT_TYPE, S1.COMP_YEAR,
    S1.COM_IND, S1.CUST_NI_AMT, S1.CUST_PI_AMT, S1.CUST_NEW_AMT, S1.CUST_RENEWAL_AMT,
    S1.CUST_INCREASE_AMT, S1.NEW_RATE, S1.RENEWAL_RATE, S1.INCREASE_RATE, S1.CUST_COM_AMT,
    S1.CUST_TYPE, S1.ITEM_ID, S1.SV_ITEM_ID, S1.PRODUCT_CODE, S1.PRODUCT_ISSUE_NUM,
    S1.PROD_TYPE, S1.UDAC_CODE, S1.NI_AMT, S1.PI_AMT, S1.CUMULATIVE_PI_AMT,
    S1.CUMULATIVE_NI_AMT, S1.TRANS_ID, S1.QUERY_MATCH, S1.CUSTDET_TRANS_ID,
    S1.ALLOC_TYPE,
    SUM(S1.NI_AMT) OVER
          (PARTITION BY S1.KGEN_PAYEEID,
                        S1.PAY_PERIOD_ID,
                        S1.CUSTOMER_ID,
                        S1.PRODUCT_TYPE,
                        S1.COMP_YEAR) AS SUM_NI_AMTS,
     NVL(SUM(case when S1.NI_AMT > 0 then S1.NI_AMT end) OVER
          (PARTITION BY S1.KGEN_PAYEEID,
                        S1.PAY_PERIOD_ID,
                        S1.CUSTOMER_ID,
                        S1.PRODUCT_TYPE,
                        S1.COMP_YEAR),0) AS SUM_POS_NI_AMTS,   
     NVL(SUM(case when S1.NI_AMT < 0 then S1.NI_AMT end) OVER
          (PARTITION BY S1.KGEN_PAYEEID,
                        S1.PAY_PERIOD_ID,
                        S1.CUSTOMER_ID,
                        S1.PRODUCT_TYPE,
                        S1.COMP_YEAR),0) AS SUM_NEG_NI_AMTS  

  FROM 
   SCHEMA.COM_HR_TXNS_STAGE_ALL S1
  WHERE 
   S1.ALLOC_TYPE = 'M11' and
   s1.pay_period_id IN (SELECT P.PP_ID
             FROM
              SCHEMA.COM_HR_JEID_PP P
             WHERE
              P.TO_BE_PROCESSED = 'Y' AND
              P.PROCESSED = 'N')   ) S
  ) X
ON
 (X.TRANS_ID = S.TRANS_ID AND
  X.CUSTDET_TRANS_ID = S.CUSTDET_TRANS_ID AND
  S.ALLOC_TYPE = 'M11')

WHEN MATCHED THEN
  UPDATE 
   SET 
     S.CALC_NEW_AMT = X.CALC_NEW_AMT,
     S.CALC_RENEWAL_AMT = X.CALC_RENEWAL_AMT,
     S.CALC_INCREASE_AMT = X.CALC_INCREASE_AMT;
COMMIT;


/***** SET 'PU' ALLOCATIONS *****/
/* UNABLE TO IDENTIFY A METHOD THAT IS REASONABLE */
/* CREATE AN UNKNOWN VERSION THAT CAN BE PUSHED UP TO PP RESULTS*/
/* USE A PRODUCT TYPE LIKE THE MATCHING RECORDS FROM TRANS TABLE */

UPDATE SCHEMA.COM_HR_TXNS_STAGE_ALL S
SET S.ALLOC_TYPE = 'PU' 

WHERE
 TRIM(S.ALLOC_TYPE) IS NULL AND
 TRIM(S.CUST_TYPE) = 'ADV' and
 s.pay_period_id IN (SELECT P.PP_ID
             FROM
              SCHEMA.COM_HR_JEID_PP P
             WHERE
              P.TO_BE_PROCESSED = 'Y' AND
              P.PROCESSED = 'N') ;
COMMIT;

MERGE INTO SCHEMA.COM_HR_TXNS_STAGE_ALL S
USING
(
SELECT 
 S.KGEN_PAYEEID,
 S.PAY_PERIOD_ID,
 S.CUSTOMER_ID,
 S.ALT_CUSTOMER_ID,
 S.PRODUCT_TYPE,
 S.COMP_YEAR,
 S.SOURCE,
 S.COM_IND,
 S.CUST_NEW_AMT,
 S.CUST_RENEWAL_AMT,
 S.CUST_INCREASE_AMT,
 S.CUST_DIG_NEW_SEM_AMT,
 MAX(S.TRANS_ID) AS TRANS_ID
FROM
 SCHEMA.COM_HR_TXNS_STAGE_ALL S
WHERE
 S.ALLOC_TYPE IN ('PU') and
 s.pay_period_id IN (SELECT P.PP_ID
             FROM
              SCHEMA.COM_HR_JEID_PP P
             WHERE
              P.TO_BE_PROCESSED = 'Y' AND
              P.PROCESSED = 'N') 
GROUP BY
 S.KGEN_PAYEEID,
 S.PAY_PERIOD_ID,
 S.CUSTOMER_ID,
 S.ALT_CUSTOMER_ID,
 S.PRODUCT_TYPE,
 S.COMP_YEAR,
 S.SOURCE,
 S.COM_IND,
 S.CUST_NEW_AMT,
 S.CUST_RENEWAL_AMT,
 S.CUST_INCREASE_AMT,
 S.CUST_DIG_NEW_SEM_AMT) X
ON
 (X.TRANS_ID = S.TRANS_ID)

WHEN MATCHED THEN
 UPDATE
  SET S.CALC_NEW_AMT = 0,
      S.CALC_RENEWAL_AMT = S.CUST_RENEWAL_AMT,
      S.CALC_INCREASE_AMT = S.CUST_INCREASE_AMT,
      S.CALC_DIG_NEW_SEM_AMT = 0;
COMMIT; 



/***** SET 'N2' ALLOCATIONS *****/
MERGE INTO SCHEMA.COM_HR_TXNS_STAGE_ALL S
USING
 (
  SELECT
   X.TRANS_ID,
   X.CUSTDET_TRANS_ID
  FROM 
   (
    SELECT
     S.KGEN_PAYEEID,
     S.PAY_PERIOD_ID,
     S.CUSTOMER_ID,
     S.PRODUCT_TYPE,
     S.COMP_YEAR,  
     S.TRANS_ID,
     S.CUSTDET_TRANS_ID,
     SUM(ABS(S.NI_AMT)) OVER
              (PARTITION BY S.KGEN_PAYEEID,
                            S.PAY_PERIOD_ID,
                            S.CUSTOMER_ID,
                            S.PRODUCT_TYPE,
                            S.COMP_YEAR) SUM_ABS_NI_AMT
     
    FROM
     SCHEMA.COM_HR_TXNS_STAGE_ALL S
    WHERE
     TRIM(S.CUST_TYPE) = 'NEW'
     AND TRIM(S.ALLOC_TYPE) IS NULL AND 
     S.CUST_NI_AMT <> 0 and
     s.pay_period_id IN (SELECT P.PP_ID
                 FROM
                  SCHEMA.COM_HR_JEID_PP P
                 WHERE
                  P.TO_BE_PROCESSED = 'Y' AND
                  P.PROCESSED = 'N')     
   ) X
  WHERE
   X.SUM_ABS_NI_AMT <> 0 
 ) X
ON 
 (X.TRANS_ID = S.TRANS_ID AND
  X.CUSTDET_TRANS_ID = S.CUSTDET_TRANS_ID
  ) 

WHEN MATCHED THEN
  UPDATE 
   SET S.ALLOC_TYPE = 'N2'
WHERE
 TRIM(S.ALLOC_TYPE) IS NULL AND
 TRIM(S.CUST_TYPE) = 'NEW' and
 s.pay_period_id IN (SELECT P.PP_ID
             FROM
              SCHEMA.COM_HR_JEID_PP P
             WHERE
              P.TO_BE_PROCESSED = 'Y' AND
              P.PROCESSED = 'N');
COMMIT;

MERGE INTO SCHEMA.COM_HR_TXNS_STAGE_ALL S
USING
 (SELECT
  S.CUSTDET_TRANS_ID,
  S.TRANS_ID, 
  ROUND(CASE WHEN S.SUM_NI_AMTS >1 OR S.SUM_NI_AMTS <-1 THEN
    (S.CUST_NEW_AMT/S.SUM_NI_AMTS)*S.NI_AMT 
   ELSE
    CASE /* WHEN NEW AMT IS POSITIVE USE POSITIVE NI AMTS FOR ALLOC */ 
         WHEN S.CUST_NEW_AMT > 0 AND S.SUM_POS_NI_AMTS > 0 THEN 
           CASE WHEN S.NI_AMT < 0 THEN NI_AMT
                WHEN S.NI_AMT > 0 THEN
                     S.NI_AMT/S.SUM_POS_NI_AMTS*(S.CUST_NEW_AMT-S.SUM_NEG_NI_AMTS) END 
           
         WHEN S.CUST_NEW_AMT > 0 AND S.SUM_POS_NI_AMTS = 0 THEN 
           CASE WHEN S.NI_AMT < 0 THEN ABS(S.NI_AMT)/ABS(S.SUM_NEG_NI_AMTS)*S.CUST_NEW_AMT
                END
                   
         /* WHEN NEW AMT IS NEGATIVE USE NEGATIVE NI AMTS FOR ALLOC */        
         WHEN S.CUST_NEW_AMT < 0 AND S.SUM_NEG_NI_AMTS < 0 THEN            
           CASE WHEN S.NI_AMT > 0 THEN S.NI_AMT
                WHEN S.NI_AMT < 0 THEN
                     S.NI_AMT/S.SUM_NEG_NI_AMTS*(S.CUST_NEW_AMT-S.SUM_POS_NI_AMTS) END
                   
         WHEN S.CUST_NEW_AMT < 0 AND S.SUM_NEG_NI_AMTS = 0 THEN            
           CASE WHEN S.NI_AMT > 0 THEN (S.NI_AMT/S.SUM_POS_NI_AMTS)*S.CUST_NEW_AMT END          
                   
    END END,2) AS CALC_NEW_AMT,       
  0 AS CALC_RENEWAL_AMT, 
  0 AS CALC_INCREASE_AMT,
  ROUND(CASE WHEN S.SUM_NI_AMTS >1 OR S.SUM_NI_AMTS <-1 THEN
    (S.CUST_DIG_NEW_SEM_AMT/S.SUM_NI_AMTS)*S.NI_AMT 
   ELSE
    CASE /* WHEN NEW AMT IS POSITIVE USE POSITIVE NI AMTS FOR ALLOC */ 
         WHEN S.CUST_DIG_NEW_SEM_AMT > 0 AND S.SUM_POS_NI_AMTS > 0 THEN 
           CASE WHEN S.NI_AMT < 0 THEN NI_AMT
                WHEN S.NI_AMT > 0 THEN
                     S.NI_AMT/S.SUM_POS_NI_AMTS*(S.CUST_DIG_NEW_SEM_AMT-S.SUM_NEG_NI_AMTS) END 
           
         WHEN S.CUST_DIG_NEW_SEM_AMT > 0 AND S.SUM_POS_NI_AMTS = 0 THEN 
           CASE WHEN S.NI_AMT < 0 THEN ABS(S.NI_AMT)/ABS(S.SUM_NEG_NI_AMTS)*S.CUST_DIG_NEW_SEM_AMT
                END
                   
         /* WHEN NEW AMT IS NEGATIVE USE NEGATIVE NI AMTS FOR ALLOC */        
         WHEN S.CUST_DIG_NEW_SEM_AMT < 0 AND S.SUM_NEG_NI_AMTS < 0 THEN            
           CASE WHEN S.NI_AMT > 0 THEN S.NI_AMT
                WHEN S.NI_AMT < 0 THEN
                     S.NI_AMT/S.SUM_NEG_NI_AMTS*(S.CUST_DIG_NEW_SEM_AMT-S.SUM_POS_NI_AMTS) END
                   
         WHEN S.CUST_DIG_NEW_SEM_AMT < 0 AND S.SUM_NEG_NI_AMTS = 0 THEN            
           CASE WHEN S.NI_AMT > 0 THEN (S.NI_AMT/S.SUM_POS_NI_AMTS)*S.CUST_DIG_NEW_SEM_AMT END          
                   
    END END,2) CALC_DIG_NEW_SEM_AMT     
                
FROM 
(
 SELECT
    S1.KGEN_PAYEEID, S1.PAY_PERIOD_ID, S1.CUSTOMER_ID, S1.PRODUCT_TYPE, S1.COMP_YEAR,
    S1.COM_IND, S1.CUST_NI_AMT, S1.CUST_PI_AMT, S1.CUST_NEW_AMT, S1.CUST_RENEWAL_AMT,
    S1.CUST_INCREASE_AMT, S1.NEW_RATE, S1.RENEWAL_RATE, S1.INCREASE_RATE, S1.CUST_COM_AMT,
    S1.CUST_TYPE, S1.ITEM_ID, S1.SV_ITEM_ID, S1.PRODUCT_CODE, S1.PRODUCT_ISSUE_NUM,
    S1.PROD_TYPE, S1.UDAC_CODE, S1.NI_AMT, S1.PI_AMT, S1.CUMULATIVE_PI_AMT,
    S1.CUMULATIVE_NI_AMT, S1.TRANS_ID, S1.QUERY_MATCH, S1.CUSTDET_TRANS_ID,
    S1.ALLOC_TYPE, S1.CUST_DIG_NEW_SEM_AMT,
    SUM(S1.NI_AMT) OVER
          (PARTITION BY S1.KGEN_PAYEEID,
                        S1.PAY_PERIOD_ID,
                        S1.CUSTOMER_ID,
                        S1.PRODUCT_TYPE,
                        S1.COMP_YEAR) AS SUM_NI_AMTS,
     NVL(SUM(case when S1.NI_AMT > 0 then S1.NI_AMT end) OVER
          (PARTITION BY S1.KGEN_PAYEEID,
                        S1.PAY_PERIOD_ID,
                        S1.CUSTOMER_ID,
                        S1.PRODUCT_TYPE,
                        S1.COMP_YEAR),0) AS SUM_POS_NI_AMTS,   
     NVL(SUM(case when S1.NI_AMT < 0 then S1.NI_AMT end) OVER
          (PARTITION BY S1.KGEN_PAYEEID,
                        S1.PAY_PERIOD_ID,
                        S1.CUSTOMER_ID,
                        S1.PRODUCT_TYPE,
                        S1.COMP_YEAR),0) AS SUM_NEG_NI_AMTS  

  FROM 
   SCHEMA.COM_HR_TXNS_STAGE_ALL S1
  WHERE 
   S1.ALLOC_TYPE = 'N2' and
   s1.pay_period_id IN (SELECT P.PP_ID
             FROM
              SCHEMA.COM_HR_JEID_PP P
             WHERE
              P.TO_BE_PROCESSED = 'Y' AND
              P.PROCESSED = 'N')) S
  ) X
ON
 (X.TRANS_ID = S.TRANS_ID AND
  X.CUSTDET_TRANS_ID = S.CUSTDET_TRANS_ID AND
  S.ALLOC_TYPE = 'N2')

WHEN MATCHED THEN
  UPDATE 
   SET 
     S.CALC_NEW_AMT = X.CALC_NEW_AMT,
     S.CALC_RENEWAL_AMT = X.CALC_RENEWAL_AMT,
     S.CALC_INCREASE_AMT = X.CALC_INCREASE_AMT,
     S.CALC_DIG_NEW_SEM_AMT = X.CALC_DIG_NEW_SEM_AMT;
COMMIT;
 

/***** SET 'NU' ALLOCATIONS *****/
/* UNABLE TO IDENTIFY A METHOD THAT IS REASONABLE */
/* CREATE AN UNKNOWN VERSION THAT CAN BE PUSHED UP TO PP RESULTS*/
/* USE A PRODUCT TYPE LIKE THE MATCHING RECORDS FROM TRANS TABLE */

UPDATE SCHEMA.COM_HR_TXNS_STAGE_ALL S
SET S.ALLOC_TYPE = 'NU' 

WHERE
 TRIM(S.ALLOC_TYPE) IS NULL AND
 TRIM(S.CUST_TYPE) = 'NEW' and
 s.pay_period_id IN (SELECT P.PP_ID
             FROM
              SCHEMA.COM_HR_JEID_PP P
             WHERE
              P.TO_BE_PROCESSED = 'Y' AND
              P.PROCESSED = 'N');
COMMIT;

MERGE INTO SCHEMA.COM_HR_TXNS_STAGE_ALL S
USING
(
SELECT 
 S.KGEN_PAYEEID,
 S.PAY_PERIOD_ID,
 S.CUSTOMER_ID,
 S.ALT_CUSTOMER_ID,
 S.PRODUCT_TYPE,
 S.COMP_YEAR,
 S.SOURCE,
 S.COM_IND,
 S.CUST_NEW_AMT,
 S.CUST_RENEWAL_AMT,
 S.CUST_INCREASE_AMT,
 S.CUST_DIG_NEW_SEM_AMT,
 MAX(S.TRANS_ID) AS TRANS_ID
FROM
 SCHEMA.COM_HR_TXNS_STAGE_ALL S
WHERE
 S.ALLOC_TYPE IN ('NU') and
 s.pay_period_id IN (SELECT P.PP_ID
             FROM
              SCHEMA.COM_HR_JEID_PP P
             WHERE
              P.TO_BE_PROCESSED = 'Y' AND
              P.PROCESSED = 'N') 
GROUP BY
 S.KGEN_PAYEEID,
 S.PAY_PERIOD_ID,
 S.CUSTOMER_ID,
 S.ALT_CUSTOMER_ID,
 S.PRODUCT_TYPE,
 S.COMP_YEAR,
 S.SOURCE,
 S.COM_IND,
 S.CUST_NEW_AMT,
 S.CUST_RENEWAL_AMT,
 S.CUST_INCREASE_AMT,
 S.CUST_DIG_NEW_SEM_AMT) X
ON
 (X.TRANS_ID = S.TRANS_ID)

WHEN MATCHED THEN
 UPDATE
  SET S.CALC_NEW_AMT = S.CUST_NEW_AMT,
      S.CALC_RENEWAL_AMT = 0,
      S.CALC_INCREASE_AMT = 0,
      S.CALC_DIG_NEW_SEM_AMT = S.CUST_DIG_NEW_SEM_AMT;
COMMIT; 
 
